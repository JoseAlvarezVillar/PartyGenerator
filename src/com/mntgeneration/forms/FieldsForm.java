/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mntgeneration.forms;

import com.mntgeneration.utils.EmployeeTemplateFiller;
import com.mntgeneration.utils.FieldListFiller;
import com.mntgeneration.utils.FormUtils;
import com.mntgeneration.utils.TypeOfGenerationEnum;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.border.TitledBorder;

/**
 * Form which shows the fields selected by the user in the previous screen. 
 * The MNT will be generated when the 'Generate MNT' button is pressed
 * @author jose.alvarez.villar
 */
public class FieldsForm extends javax.swing.JFrame {
    private static final Font FONT = new java.awt.Font("Tahoma", 1, 16);
    private static final String TEXTFIELD = "TextField";
    private static final String EMPTY_STRING = "";
    private List<String> fields = null;
    GridBagLayout layout = null;
    JButton generateButton = null;
    JButton stepBack = null;
    ShowFieldsListForm showFieldsLists = null;
    Map<String, JTextField> textFieldMap = new HashMap<>();
    GridBagConstraints constraints = null;
    private int idx_x = 0;
    private int idx_y = 0;
    JPanel panel = new JPanel();
    Boolean isEmployee = Boolean.FALSE;

    /**
     * Creates new form FieldsForm
     */
    public FieldsForm() {
        initComponents();
    }

    public FieldsForm(List<String> fields, ShowFieldsListForm showFieldsLists) {
        initComponents();
        this.fields = fields;
        this.showFieldsLists = showFieldsLists;
        this.isEmployee = fields.contains("EMPLOYEE_ID");
        fillForm();
        FormUtils.centreWindow(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Party Generator");
        setPreferredSize(new java.awt.Dimension(1024, 600));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 807, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 513, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fillForm() {
        layout = new GridBagLayout();
        panel.setLayout(layout);
        JScrollPane scrollPane = new JScrollPane(panel);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
//        scrollPane.setBounds(50, 30, 300, 20);
        constraints = new GridBagConstraints();

        if (fields != null && !fields.isEmpty()) {
            fields.stream().forEach(x -> createNewField(x));
        }

        if (isEmployee)showEmployeePanel ();
        stepBack = new JButton("<- Back");
        stepBack.addActionListener((java.awt.event.ActionEvent evt) -> {
            stepBack(evt);
        });
        constraints.gridx = 0;
        constraints.gridy = idx_y + 4;
        constraints.insets = new Insets(10, 10, 10, 10);
        layout.setConstraints(stepBack, constraints);

        generateButton = new JButton("Generate MNT");
        generateButton.addActionListener((java.awt.event.ActionEvent evt) -> {
            saveMap();
        });
        constraints.gridx = 1;
        constraints.gridy = idx_y + 4;
        constraints.insets = new Insets(10, 10, 10, 10);
        layout.setConstraints(generateButton, constraints);
        panel.add(stepBack);
        panel.add(generateButton);
        this.setContentPane(scrollPane);
        pack();
    }

    public void createNewField(String x) {
        if (idx_x > 3) {
            idx_x = 0;
            idx_y++;
        }
   
//        JPanel _panel = getPanelTypeByParty(x, panel);
        
//        createLabel("GROUP_MEMBERSHIP", employeePanel, idx_x++, idx_y, employeeLayout, employeeLayoutConstraints);
//        System.out.println(x + " comes from " + TypeOfGenerationEnum.getEnumNameByString(FieldListFiller.getOriginOfField(x)).name());
        createLabel(x, panel, idx_x++, idx_y, layout, constraints);
        createTextField(x, panel, idx_x++, idx_y, layout, constraints);
    }

//    private JPanel getPanelTypeByParty(String x, JPanel panel) throws IllegalArgumentException {
//        TypeOfGenerationEnum type = TypeOfGenerationEnum.getEnumNameByString(FieldListFiller.getOriginOfField(x));
//        JPanel employeePanel = null;
//        switch (type) {
//            case CUSTOMER:
//                employeePanel = panel;
//            case EMPLOYEE:
//                employeePanel = new JPanel();
//                GridBagConstraints employeeLayoutConstraints = new GridBagConstraints();
//                employeePanel.setPreferredSize(new Dimension(900, 200));
//                GridBagLayout employeeLayout = new GridBagLayout();
//                employeePanel.setLayout(employeeLayout);
//                constraints.gridx = idx_x;
//                constraints.gridy = idx_y;
//                constraints.gridwidth = 4;
//                layout.setConstraints(employeePanel, constraints);
//                panel.add(employeePanel);
//                
//                TitledBorder titledBorder = BorderFactory.createTitledBorder("Employee Information");
//                titledBorder.setTitleJustification(TitledBorder.CENTER);
//                employeePanel.setBorder(titledBorder);
//        
//                break;
//            default:
//                throw new IllegalArgumentException("Invalid type: " + type.name());
//        }
//        return employeePanel;
//    }

    private void createTextField(String x, JPanel p, int pos_x, int pos_y, GridBagLayout l, GridBagConstraints c) {
        JTextField textField = new javax.swing.JTextField();
        StringBuilder builder = new StringBuilder(x.toLowerCase());
        builder.append(TEXTFIELD);
        textField.setName(builder.toString());
        textField.setPreferredSize(new Dimension(190, 30));
        c.gridx = pos_x;
        c.gridy = pos_y;
        c.insets = new Insets(10, 10, 10, 10);
        l.setConstraints(textField, c);
        p.add(textField);
        textFieldMap.put(textField.getName(), textField);
//        System.out.println("textField.getName()->"+textField.getName());
    }
 
    private void createLabel(String x, JPanel p, int pos_x, int pos_y, GridBagLayout l, GridBagConstraints c) {
        JLabel label = new javax.swing.JLabel();
        label.setFont(FONT);
        c.gridx = pos_x;
        c.gridy = pos_y;
        c.insets = new Insets(10, 10, 10, 10);
        l.setConstraints(label, c);
        label.setText(x);
        p.add(label);
    }
    
    private void saveMap() {
        Map<String, Object> data = new HashMap();
        DefaultListModel<String> fieldListModel=  this.showFieldsLists.getMainForm().getFieldListModel();
        Collections.list(fieldListModel.elements()).stream()
                .map(x -> x.toLowerCase().concat("TextField"))
                .forEach((String x) -> {
                    if (textFieldMap.containsKey(x)) {
                        data.put(x, textFieldMap.get(x).getText());
                    } else {
                        data.put(x, EMPTY_STRING);
                    }
                });
        data.put("partyType", this.showFieldsLists.getMainForm().getTypeOfGenerationSelected().name());
        //Employee info
//        if(isEmployee) {
//            data.put("store_idTextField", textFieldMap.get("store_idTextField").getText());
//            data.put("groupMembershipTextField", textFieldMap.get("groupmembershipTextField").getText());
//            data.put("active_dateTextField", textFieldMap.get("active_dateTextField").getText());
//        data.put("add_dateTextField", textFieldMap.get("add_dateTextField").getText());
//        }
        
        EmployeeTemplateFiller.generateFile(data);
    }

    private void stepBack(ActionEvent evt) {
        showFieldsLists.setVisible(true);
        this.setVisible(false);
    }

    private void showEmployeePanel () {
        idx_x = 0;
        idx_y++;
        
        JPanel employeePanel = new JPanel();
        GridBagConstraints employeeLayoutConstraints = new GridBagConstraints();
        employeePanel.setPreferredSize(new Dimension(900, 200));
        GridBagLayout employeeLayout = new GridBagLayout();
        employeePanel.setLayout(employeeLayout);
        constraints.gridx = idx_x;
        constraints.gridy = idx_y;
        constraints.gridwidth = 4;
        layout.setConstraints(employeePanel, constraints);
        panel.add(employeePanel);
        
        TitledBorder titledBorder = BorderFactory.createTitledBorder("Employee Information");
        titledBorder.setTitleJustification(TitledBorder.CENTER);
        employeePanel.setBorder(titledBorder);
        
        createLabel("GROUP_MEMBERSHIP", employeePanel, idx_x++, idx_y, employeeLayout, employeeLayoutConstraints);
        createTextField("groupMembership", employeePanel, idx_x++, idx_y, employeeLayout,employeeLayoutConstraints);
        createLabel("PASSWORD", employeePanel, idx_x++, idx_y, employeeLayout, employeeLayoutConstraints);
        createTextField("password", employeePanel, idx_x++, idx_y, employeeLayout, employeeLayoutConstraints);
        idx_x = 0;
        idx_y++;
        createLabel("STORE_ID", employeePanel, idx_x++, idx_y, employeeLayout, employeeLayoutConstraints);
        createTextField("store_id", employeePanel, idx_x++, idx_y, employeeLayout, employeeLayoutConstraints);
        createLabel("ACTIVE_DATE", employeePanel, idx_x++, idx_y, employeeLayout, employeeLayoutConstraints);
        createTextField("active_date", employeePanel, idx_x++, idx_y, employeeLayout, employeeLayoutConstraints);
//        idx_x = 0;
//        idx_y++;
//        createLabel("ADD_DATE", employeePanel, idx_x++, idx_y, employeeLayout, employeeLayoutConstraints);
//        createTextField("add_dateTextField", employeePanel, idx_x++, idx_y, employeeLayout, employeeLayoutConstraints);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
